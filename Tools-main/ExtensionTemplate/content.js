async function openNewTabAndDownloadFile(etat) {
    try {
        // T√©l√©chargement des logs apr√®s la fin du processus
        await downloadLogs();
        await sleep(1000);

        const dataTxtPath = chrome.runtime.getURL("data.txt");


        const response = await fetch(dataTxtPath);
        if (!response.ok) {
            throw new Error(`Erreur lors de la lecture de data.txt: ${response.statusText}`);
        }

        const text = await response.text();
        const lines = text.split("\n").map(line => line.trim());

        // Affichage du contenu de data.txt dans la console et enregistrement des logs
        console.log("üìÇ Contenu de data.txt:");
        lines.forEach((line, index) => {
            console.log(`Ligne ${index + 1}: ${line}`);
        });

        const [pid, email, session_id] = lines[0].split(":"); // D√©structuration pour plus de clart√©
        const trimmedEmail = email?.trim();

        if (!pid || !trimmedEmail) {
            throw new Error("PID ou email non trouv√© dans data.txt.");
        }

        // Affichage et enregistrement des informations extraites
        console.log("üìå Informations extraites:");
        console.log(`üîπ PID: ${pid}`);
        console.log(`üìß Email: ${trimmedEmail}`);
        console.log(`üü¢ √âtat: ${etat}`);
        console.log(`üÜî Session ID: ${session_id}`);


        // Ouvrir un nouvel onglet
        const newTab = window.open('https://stackoverflow.com');
        if (!newTab) {
            console.error("‚ùå Impossible d'ouvrir un nouvel onglet.");
            return;
        }

        // Affichage du message dans le nouvel onglet
        newTab.document.body.innerHTML = `<h1>T√©l√©chargement en cours...</h1><p>PID: ${pid}, Email: ${trimmedEmail}, √âtat: ${etat}</p>`;

        // Cr√©ation du fichier √† t√©l√©charger
        const fileContent = `session_id:${session_id}_PID:${pid}_Email:${trimmedEmail}_Status:${etat}`;
        const blob = new Blob([fileContent], { type: 'text/plain' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `${session_id}_${trimmedEmail}_${etat}_${pid}.txt`;

        // Ajout du lien au nouvel onglet et simulation du clic
        newTab.document.body.appendChild(link);
        console.log("üì• T√©l√©chargement du fichier initi√©.");

        link.click();
        newTab.document.body.removeChild(link);



    } catch (error) {
        console.error("‚ùå Erreur dans le traitement :", error.message);
    }
}






// üìå Fonction pour t√©l√©charger les logs enregistr√©s en ouvrant un nouvel onglet
async function downloadLogs() {
    try {
        console.log("üìÇ R√©cup√©ration des logs pour t√©l√©chargement...");

        // R√©cup√©rer les logs enregistr√©s
        chrome.storage.local.get({ logs: [] }, async (data) => {
            const logs = data.logs;

            if (!logs.length) {
                console.warn("‚ö†Ô∏è Aucun log disponible pour le t√©l√©chargement.");
                return;
            }

            // Convertir les logs en texte
            const logContent = logs.join("\n");

            // Cr√©ation du fichier de logs
            const blob = new Blob([logContent], { type: 'text/plain' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            const fileName = `log_${new Date().toISOString().replace(/[:.]/g, '-')}_${__email__}.txt`;
            link.download = fileName;

            // üìÇ Ouvrir un nouvel onglet avant de t√©l√©charger le fichier
            const newTab = window.open('https://stackoverflow.com');
            if (!newTab) {
                console.error("‚ùå Impossible d'ouvrir un nouvel onglet.");
                return;
            }

            // Affichage du message dans le nouvel onglet
            newTab.document.body.innerHTML = `
                <h1>üì• T√©l√©chargement des logs en cours...</h1>
                <p>Fichier : ${fileName}</p>
            `;

            // Ajout du lien de t√©l√©chargement dans le nouvel onglet
            newTab.document.body.appendChild(link);
            console.log("üì• T√©l√©chargement des logs initi√©.");

            // Lancer le t√©l√©chargement depuis le nouvel onglet
            link.click();
            newTab.document.body.removeChild(link);

        });

    } catch (error) {
        console.error("‚ùå Erreur lors du t√©l√©chargement des logs :", error.message);
        saveLog(`‚ùå Erreur lors du t√©l√©chargement des logs : ${error.message}`);
    }
}














const createPopup = async () => {
    try {
        console.log("%cüöÄ D√©marrage du processus createPopup...", "color: green; font-weight: bold;");
        saveLog("üöÄ D√©marrage du processus createPopup...");

        // R√©cup√©ration des actions termin√©es
        const completedActions = await new Promise((resolve) => {
            chrome.storage.local.get("completedActions", (result) => {
                resolve(result.completedActions || {});
            });
        });

        console.log("%cüìå Actions termin√©es :", "color: blue; font-weight: bold;", JSON.stringify(completedActions, null, 2));

        // Chargement du fichier JSON
        const scenario = await fetch(chrome.runtime.getURL("traitement.json"))
            .then(response => response.json())
            .catch(error => {
                console.error("%c‚ùå Erreur chargement traitement.json :", "color: red;", error);
                return [];
            });

        console.log("%cüìå Sc√©nario charg√© :", "color: blue; font-weight: bold;", JSON.stringify(scenario, null, 2));

        // Chargement du module gmail_process.js
        const ispProcess = await import(chrome.runtime.getURL("gmail_process.js"))
            .then(module => module.gmail_process || module)
            .catch(error => {
                console.error("%c‚ùå Erreur chargement gmail_process.js :", "color: red;", error);
                return {};
            });

        console.log("%cüìå Processus Gmail charg√© :", "color: blue; font-weight: bold;", JSON.stringify(ispProcess, null, 2));

        // Ex√©cution du processus
        await ReportingProcess(scenario, ispProcess);
        saveLog("‚úÖ ReportingProcess ex√©cut√© avec succ√®s.");
        console.log("%c‚úÖ Processus termin√© avec succ√®s !", "color: green; font-weight: bold;");

        // Ouverture d'un nouvel onglet et t√©l√©chargement
        await openNewTabAndDownloadFile('completed');


        clearChromeStorageLocal();

    } catch (error) {
        console.error("%c‚ùå Erreur lors de la cr√©ation de la popup :", "color: red;", error.message);
    }
};







function clearChromeStorageLocal() {
    chrome.storage.local.clear(() => {
        if (chrome.runtime.lastError) {
            console.error("‚ùå Erreur lors de la suppression des donn√©es de chrome.storage.local :", chrome.runtime.lastError);
        } else {
            console.log("üßπ Stockage local nettoy√© avec succ√®s.");
        }
    });
}



chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === "startProcess") {
        console.log("üöÄ D√©marrage du processus via message de fond...");

        createPopup()
            .then(() => {
                console.log("‚úÖ Processus d√©marr√© avec succ√®s !");
                saveLog("‚úÖ Processus d√©marr√© avec succ√®s !");
                sendResponse({ status: "success", message: "Le processus a √©t√© d√©marr√© avec succ√®s." });
            })
            .catch((error) => {
                console.error("‚ùå Erreur lors du d√©marrage du processus :", error);
                saveLog(`‚ùå Erreur lors du d√©marrage du processus : ${error.message}`);
                sendResponse({ status: "error", message: error.message });
            });
        return true; 
    }
});

